#
# libcloud
# A Unified Interface into The Cloud
#
# Linode Driver
# Copyright (C) 2009 libcloud.org and contributors.
# Released under license; see LICENSE for more information.
#
# Maintainer: Jed Smith <jsmith@linode.com>
# Based upon code written by Alex Polvi <polvi@cloudkick.com>
#
# Because I'm OCD, the responses are slurped into base64 instead of being a
# heredoc in the code.  However, they are legitimate responses from Linode API.
#

from libcloud.drivers.linode import LinodeNodeDriver
from test import MockHttp

import base64
import unittest
import httplib

# RESPONSES
def d(response): return base64.b64decode(response)
avail_linodeplans = "eyJFUlJPUkFSUkFZIjpbXSwiQUNUSU9OIjoiYXZhaWwubGlub2RlcGxhbnMiLCJEQVRBIjpbeyJBVkFJTCI6eyIyIjoyNywiMyI6MCwiNCI6MCwiNiI6MH0sIkRJU0siOjE2LCJQUklDRSI6MTkuOTUsIlBMQU5JRCI6MSwiTEFCRUwiOiJMaW5vZGUgMzYwIiwiUkFNIjozNjAsIlhGRVIiOjIwMH0seyJBVkFJTCI6eyIyIjowLCIzIjowLCI0IjowLCI2IjowfSwiRElTSyI6MjQsIlBSSUNFIjoyOS45NSwiUExBTklEIjoyLCJMQUJFTCI6Ikxpbm9kZSA1NDAiLCJSQU0iOjU0MCwiWEZFUiI6MzAwfSx7IkFWQUlMIjp7IjIiOjAsIjMiOjAsIjQiOjAsIjYiOjB9LCJESVNLIjozMiwiUFJJQ0UiOjM5Ljk1LCJQTEFOSUQiOjMsIkxBQkVMIjoiTGlub2RlIDcyMCIsIlJBTSI6NzIwLCJYRkVSIjo0MDB9LHsiQVZBSUwiOnsiMiI6MCwiMyI6MCwiNCI6MCwiNiI6MH0sIkRJU0siOjQ4LCJQUklDRSI6NTkuOTUsIlBMQU5JRCI6NCwiTEFCRUwiOiJMaW5vZGUgMTA4MCIsIlJBTSI6MTA4MCwiWEZFUiI6NjAwfSx7IkFWQUlMIjp7IjIiOjAsIjMiOjAsIjQiOjAsIjYiOjB9LCJESVNLIjo2NCwiUFJJQ0UiOjc5Ljk1LCJQTEFOSUQiOjUsIkxBQkVMIjoiTGlub2RlIDE0NDAiLCJSQU0iOjE0NDAsIlhGRVIiOjgwMH0seyJBVkFJTCI6eyIyIjowLCIzIjowLCI0IjowLCI2IjowfSwiRElTSyI6MTI4LCJQUklDRSI6MTU5Ljk1LCJQTEFOSUQiOjYsIkxBQkVMIjoiTGlub2RlIDI4ODAiLCJSQU0iOjI4ODAsIlhGRVIiOjE2MDB9LHsiQVZBSUwiOnsiMiI6MCwiMyI6MCwiNCI6MCwiNiI6MH0sIkRJU0siOjI1NiwiUFJJQ0UiOjMxOS45NSwiUExBTklEIjo3LCJMQUJFTCI6Ikxpbm9kZSA1NzYwIiwiUkFNIjo1NzYwLCJYRkVSIjoyMDAwfSx7IkFWQUlMIjp7IjIiOjAsIjMiOjAsIjQiOjAsIjYiOjB9LCJESVNLIjozODQsIlBSSUNFIjo0NzkuOTUsIlBMQU5JRCI6OCwiTEFCRUwiOiJMaW5vZGUgODY0MCIsIlJBTSI6ODY0MCwiWEZFUiI6MjAwMH0seyJBVkFJTCI6eyIyIjowLCIzIjowLCI0IjowLCI2IjowfSwiRElTSyI6NTEyLCJQUklDRSI6NjM5Ljk1LCJQTEFOSUQiOjksIkxBQkVMIjoiTGlub2RlIDExNTIwIiwiUkFNIjoxMTUyMCwiWEZFUiI6MjAwMH0seyJBVkFJTCI6eyIyIjowLCIzIjowLCI0IjowLCI2IjowfSwiRElTSyI6NjQwLCJQUklDRSI6Nzk5Ljk1LCJQTEFOSUQiOjEwLCJMQUJFTCI6Ikxpbm9kZSAxNDQwMCIsIlJBTSI6MTQ0MDAsIlhGRVIiOjIwMDB9XX0="
avail_distributions = "eyJFUlJPUkFSUkFZIjpbXSwiQUNUSU9OIjoiYXZhaWwuZGlzdHJpYnV0aW9ucyIsIkRBVEEiOlt7IklTNjRCSVQiOjAsIkxBQkVMIjoiQXJjaCBMaW51eCAyMDA3LjA4IiwiTUlOSU1BR0VTSVpFIjo0MzYsIkRJU1RSSUJVVElPTklEIjozOCwiQ1JFQVRFX0RUIjoiMjAwNy0xMC0yNCAwMDowMDowMC4wIn0seyJJUzY0QklUIjowLCJMQUJFTCI6IkNlbnRvcyA1LjAiLCJNSU5JTUFHRVNJWkUiOjU5NCwiRElTVFJJQlVUSU9OSUQiOjMyLCJDUkVBVEVfRFQiOiIyMDA3LTA0LTI3IDAwOjAwOjAwLjAifSx7IklTNjRCSVQiOjAsIkxBQkVMIjoiQ2VudG9zIDUuMiIsIk1JTklNQUdFU0laRSI6OTUwLCJESVNUUklCVVRJT05JRCI6NDYsIkNSRUFURV9EVCI6IjIwMDgtMTEtMzAgMDA6MDA6MDAuMCJ9LHsiSVM2NEJJVCI6MSwiTEFCRUwiOiJDZW50b3MgNS4yIDY0Yml0IiwiTUlOSU1BR0VTSVpFIjo5ODAsIkRJU1RSSUJVVElPTklEIjo0NywiQ1JFQVRFX0RUIjoiMjAwOC0xMS0zMCAwMDowMDowMC4wIn0seyJJUzY0QklUIjowLCJMQUJFTCI6IkRlYmlhbiA0LjAiLCJNSU5JTUFHRVNJWkUiOjIwMCwiRElTVFJJQlVUSU9OSUQiOjI4LCJDUkVBVEVfRFQiOiIyMDA3LTA0LTE4IDAwOjAwOjAwLjAifSx7IklTNjRCSVQiOjEsIkxBQkVMIjoiRGViaWFuIDQuMCA2NGJpdCIsIk1JTklNQUdFU0laRSI6MjIwLCJESVNUUklCVVRJT05JRCI6NDgsIkNSRUFURV9EVCI6IjIwMDgtMTItMDIgMDA6MDA6MDAuMCJ9LHsiSVM2NEJJVCI6MCwiTEFCRUwiOiJEZWJpYW4gNS4wIiwiTUlOSU1BR0VTSVpFIjoyMDAsIkRJU1RSSUJVVElPTklEIjo1MCwiQ1JFQVRFX0RUIjoiMjAwOS0wMi0xOSAwMDowMDowMC4wIn0seyJJUzY0QklUIjoxLCJMQUJFTCI6IkRlYmlhbiA1LjAgNjRiaXQiLCJNSU5JTUFHRVNJWkUiOjMwMCwiRElTVFJJQlVUSU9OSUQiOjUxLCJDUkVBVEVfRFQiOiIyMDA5LTAyLTE5IDAwOjAwOjAwLjAifSx7IklTNjRCSVQiOjAsIkxBQkVMIjoiRmVkb3JhIDgiLCJNSU5JTUFHRVNJWkUiOjc0MCwiRElTVFJJQlVUSU9OSUQiOjQwLCJDUkVBVEVfRFQiOiIyMDA3LTExLTA5IDAwOjAwOjAwLjAifSx7IklTNjRCSVQiOjAsIkxBQkVMIjoiRmVkb3JhIDkiLCJNSU5JTUFHRVNJWkUiOjExNzUsIkRJU1RSSUJVVElPTklEIjo0MywiQ1JFQVRFX0RUIjoiMjAwOC0wNi0wOSAxNToxNToyMS4wIn0seyJJUzY0QklUIjowLCJMQUJFTCI6IkdlbnRvbyAyMDA3LjAiLCJNSU5JTUFHRVNJWkUiOjE4MDAsIkRJU1RSSUJVVElPTklEIjozNSwiQ1JFQVRFX0RUIjoiMjAwNy0wOC0yOSAwMDowMDowMC4wIn0seyJJUzY0QklUIjowLCJMQUJFTCI6IkdlbnRvbyAyMDA4LjAiLCJNSU5JTUFHRVNJWkUiOjE1MDAsIkRJU1RSSUJVVElPTklEIjo1MiwiQ1JFQVRFX0RUIjoiMjAwOS0wMy0yMCAwMDowMDowMC4wIn0seyJJUzY0QklUIjoxLCJMQUJFTCI6IkdlbnRvbyAyMDA4LjAgNjRiaXQiLCJNSU5JTUFHRVNJWkUiOjI1MDAsIkRJU1RSSUJVVElPTklEIjo1MywiQ1JFQVRFX0RUIjoiMjAwOS0wNC0wNCAwMDowMDowMC4wIn0seyJJUzY0QklUIjowLCJMQUJFTCI6Ik9wZW5TVVNFIDExLjAiLCJNSU5JTUFHRVNJWkUiOjg1MCwiRElTVFJJQlVUSU9OSUQiOjQ0LCJDUkVBVEVfRFQiOiIyMDA4LTA4LTIxIDA4OjMyOjE2LjAifSx7IklTNjRCSVQiOjAsIkxBQkVMIjoiU2xhY2t3YXJlIDEyLjAiLCJNSU5JTUFHRVNJWkUiOjMxNSwiRElTVFJJQlVUSU9OSUQiOjM0LCJDUkVBVEVfRFQiOiIyMDA3LTA3LTE2IDAwOjAwOjAwLjAifSx7IklTNjRCSVQiOjAsIkxBQkVMIjoiU2xhY2t3YXJlIDEyLjIiLCJNSU5JTUFHRVNJWkUiOjUwMCwiRElTVFJJQlVUSU9OSUQiOjU0LCJDUkVBVEVfRFQiOiIyMDA5LTA0LTA0IDAwOjAwOjAwLjAifSx7IklTNjRCSVQiOjAsIkxBQkVMIjoiVWJ1bnR1IDguMDQgTFRTIiwiTUlOSU1BR0VTSVpFIjo0MDAsIkRJU1RSSUJVVElPTklEIjo0MSwiQ1JFQVRFX0RUIjoiMjAwOC0wNC0yMyAxNToxMToyOS4wIn0seyJJUzY0QklUIjoxLCJMQUJFTCI6IlVidW50dSA4LjA0IExUUyA2NGJpdCIsIk1JTklNQUdFU0laRSI6MzUwLCJESVNUUklCVVRJT05JRCI6NDIsIkNSRUFURV9EVCI6IjIwMDgtMDYtMDMgMTI6NTE6MTEuMCJ9LHsiSVM2NEJJVCI6MCwiTEFCRUwiOiJVYnVudHUgOC4xMCIsIk1JTklNQUdFU0laRSI6MjIwLCJESVNUUklCVVRJT05JRCI6NDUsIkNSRUFURV9EVCI6IjIwMDgtMTAtMzAgMjM6MjM6MDMuMCJ9LHsiSVM2NEJJVCI6MSwiTEFCRUwiOiJVYnVudHUgOC4xMCA2NGJpdCIsIk1JTklNQUdFU0laRSI6MjMwLCJESVNUUklCVVRJT05JRCI6NDksIkNSRUFURV9EVCI6IjIwMDgtMTItMDIgMDA6MDA6MDAuMCJ9LHsiSVM2NEJJVCI6MCwiTEFCRUwiOiJVYnVudHUgOS4wNCIsIk1JTklNQUdFU0laRSI6MzUwLCJESVNUUklCVVRJT05JRCI6NTUsIkNSRUFURV9EVCI6IjIwMDktMDQtMjMgMDA6MDA6MDAuMCJ9LHsiSVM2NEJJVCI6MSwiTEFCRUwiOiJVYnVudHUgOS4wNCA2NGJpdCIsIk1JTklNQUdFU0laRSI6MzUwLCJESVNUUklCVVRJT05JRCI6NTYsIkNSRUFURV9EVCI6IjIwMDktMDQtMjMgMDA6MDA6MDAuMCJ9XX0="
linode_list = "ewogICAiRVJST1JBUlJBWSI6W10sCiAgICJBQ1RJT04iOiJsaW5vZGUubGlzdCIsCiAgICJEQVRBIjpbCiAgICAgIHsKICAgICAgICAgIlRPVEFMWEZFUiI6MjAwLAogICAgICAgICAiQkFDS1VQU0VOQUJMRUQiOjEsCiAgICAgICAgICJXQVRDSERPRyI6MSwKICAgICAgICAgIkxQTV9ESVNQTEFZR1JPVVAiOiIiLAogICAgICAgICAiQUxFUlRfQldRVU9UQV9FTkFCTEVEIjoxLAogICAgICAgICAiU1RBVFVTIjoyLAogICAgICAgICAiVE9UQUxSQU0iOjU0MCwKICAgICAgICAgIkFMRVJUX0RJU0tJT19USFJFU0hPTEQiOjIwMCwKICAgICAgICAgIkJBQ0tVUFdJTkRPVyI6MSwKICAgICAgICAgIkFMRVJUX0JXT1VUX0VOQUJMRUQiOjEsCiAgICAgICAgICJBTEVSVF9CV09VVF9USFJFU0hPTEQiOjUsCiAgICAgICAgICJMQUJFTCI6ImFwaS1ub2RlMyIsCiAgICAgICAgICJBTEVSVF9DUFVfRU5BQkxFRCI6MSwKICAgICAgICAgIkFMRVJUX0JXUVVPVEFfVEhSRVNIT0xEIjo4MSwKICAgICAgICAgIkFMRVJUX0JXSU5fVEhSRVNIT0xEIjo1LAogICAgICAgICAiQkFDS1VQV0VFS0xZREFZIjowLAogICAgICAgICAiREFUQUNFTlRFUklEIjo1LAogICAgICAgICAiQUxFUlRfQ1BVX1RIUkVTSE9MRCI6MTAsCiAgICAgICAgICJUT1RBTEhEIjoxMDAsCiAgICAgICAgICJBTEVSVF9ESVNLSU9fRU5BQkxFRCI6MSwKICAgICAgICAgIkFMRVJUX0JXSU5fRU5BQkxFRCI6MSwKICAgICAgICAgIkxJTk9ERUlEIjo4MDk4CiAgICAgIH0KICAgXQp9"
linode_ip_list = "ewogICAiRVJST1JBUlJBWSI6W10sCiAgICJBQ1RJT04iOiJsaW5vZGUuaXAubGlzdCIsCiAgICJEQVRBIjpbCiAgICAgIHsKICAgICAgICAgIkxJTk9ERUlEIjo4MDk4LAogICAgICAgICAiSVNQVUJMSUMiOjEsCiAgICAgICAgICJJUEFERFJFU1MiOiI3NS4xMjcuOTYuNTQiLAogICAgICAgICAiUkROU19OQU1FIjoibGkyMi01NC5tZW1iZXJzLmxpbm9kZS5jb20iLAogICAgICAgICAiSVBBRERSRVNTSUQiOjUzODQKICAgICAgfSwKICAgICAgewogICAgICAgICAiTElOT0RFSUQiOjgwOTgsCiAgICAgICAgICJJU1BVQkxJQyI6MSwKICAgICAgICAgIklQQUREUkVTUyI6Ijc1LjEyNy45Ni4yNDUiLAogICAgICAgICAiUkROU19OQU1FIjoibGkyMi0yNDUubWVtYmVycy5saW5vZGUuY29tIiwKICAgICAgICAgIklQQUREUkVTU0lEIjo1NTc1CiAgICAgIH0KICAgXQp9"

class LinodeTest(unittest.TestCase):
    # The Linode test suite
    
    def setUp(self):
        LinodeNodeDriver.connectionCls.conn_classes = (None, LinodeMockHttp)
        LinodeMockHttp.use_param = 'api_action'
        self.driver = LinodeNodeDriver('foo')

    def test_list_nodes(self):
        nodes = self.driver.list_nodes()
        self.assertEqual(len(nodes), 1)
        self.assertEqual(node.id, 8098)
        self.assertEqual(node.name, 'api-node3')
        self.assertEqual(node.public_ip, '75.127.96.245')
        self.assertEqual(node.private_ip, None)
    
    def test_reboot_node(self):
        pass

    def test_destroy_node(self):
        pass
    
    def test_create_node(self):
        pass
    
    def test_list_sizes(self):
        sizes = self.driver.list_sizes()
        self.assertEqual(len(sizes), 10)
        for size in sizes:
            self.assertEqual(size.ram, int(size.name.split(" ")[1]))
    
    def test_list_images(self):
        images = self.driver.list_images()
        self.assertEqual(len(images), 22)
        


        
class LinodeMockHttp(MockHttp):
    
    def _avail_linodeplans(self, method, url, body, headers):
        return (httplib.OK, d(avail_linodeplans), {}, httplib.responses[httplib.OK])
    
    def _avail_distributions(self, method, url, body, headers):
        return (httplib.OK, d(avail_distributions), {}, httplib.responses[httplib.OK])

    def _linode_list(self, method, url, body, headers):
        return (httplib.OK, d(linode_list), {}, httplib.responses[httplib.OK])

    def _linode_ip_list(self, method, url, body, headers):
        return (httplib.OK, d(linode_ip_list), {}, httplib.responses[httplib.OK])
